[ 88%] Built target remote_thr
[ 89%] Built target reqrep
[ 90%] Built target reqttl
[ 90%] Built target separation
[ 91%] Built target shutdown
[ 92%] Built target stats
[ 93%] Built target survey
[ 93%] Built target surveyttl
[ 94%] Built target symbol
[ 95%] Built target tcp
[ 95%] Built target tcp_shutdown
[ 96%] Built target term
[ 97%] Built target timeo
[ 97%] Built target trie
[ 98%] Built target ws
[ 99%] Built target ws_async_shutdown
[100%] Built target zerocopy
Install the project...
-- Install configuration: ""
-- Installing: /usr/include/nanomsg/nn.h
-- Installing: /usr/include/nanomsg/inproc.h
-- Installing: /usr/include/nanomsg/ipc.h
-- Installing: /usr/include/nanomsg/tcp.h
-- Installing: /usr/include/nanomsg/ws.h
-- Installing: /usr/include/nanomsg/pair.h
-- Installing: /usr/include/nanomsg/pubsub.h
-- Installing: /usr/include/nanomsg/reqrep.h
-- Installing: /usr/include/nanomsg/pipeline.h
-- Installing: /usr/include/nanomsg/survey.h
-- Installing: /usr/include/nanomsg/bus.h
-- Installing: /usr/bin/nanocat
-- Removed runtime path from "/usr/bin/nanocat"
-- Installing: /usr/lib/x86_64-linux-gnu/pkgconfig/nanomsg.pc
-- Installing: /usr/lib/x86_64-linux-gnu/libnanomsg.so.1.0.0
-- Installing: /usr/lib/x86_64-linux-gnu/libnanomsg.so.5.0.0
-- Installing: /usr/lib/x86_64-linux-gnu/libnanomsg.so
Cloning into 'nnpy'...
Note: checking out 'c7e718a5173447c85182dc45f99e2abcf9cd4065'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at c7e718a... Merge pull request #7 from bnewbold/patch-1
Downloading/unpacking cffi
  Running setup.py (path:/tmp/pip_build_root/cffi/setup.py) egg_info for package cffi
    
Downloading/unpacking pycparser (from cffi)
  Running setup.py (path:/tmp/pip_build_root/pycparser/setup.py) egg_info for package pycparser
    
    warning: no previously-included files matching 'yacctab.*' found under directory 'tests'
    warning: no previously-included files matching 'lextab.*' found under directory 'tests'
    warning: no previously-included files matching 'yacctab.*' found under directory 'examples'
    warning: no previously-included files matching 'lextab.*' found under directory 'examples'
Installing collected packages: cffi, pycparser
  Running setup.py install for cffi
    building '_cffi_backend' extension
    x86_64-linux-gnu-gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -DUSE__THREAD -DHAVE_SYNC_SYNCHRONIZE -I/usr/include/python2.7 -c c/_cffi_backend.c -o build/temp.linux-x86_64-2.7/c/_cffi_backend.o
    x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -D_FORTIFY_SOURCE=2 -g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security build/temp.linux-x86_64-2.7/c/_cffi_backend.o -lffi -o build/lib.linux-x86_64-2.7/_cffi_backend.so
    
  Running setup.py install for pycparser
    
    warning: no previously-included files matching 'yacctab.*' found under directory 'tests'
    warning: no previously-included files matching 'lextab.*' found under directory 'tests'
    warning: no previously-included files matching 'yacctab.*' found under directory 'examples'
    warning: no previously-included files matching 'lextab.*' found under directory 'examples'
    Build the lexing/parsing tables
Successfully installed cffi pycparser
Cleaning up...
Unpacking /nnpy
  Running setup.py (path:/tmp/pip-_rByfX-build/setup.py) egg_info for package from file:///nnpy
    
Requirement already satisfied (use --upgrade to upgrade): cffi in /usr/local/lib/python2.7/dist-packages (from nnpy==0.1)
Requirement already satisfied (use --upgrade to upgrade): pycparser in /usr/local/lib/python2.7/dist-packages (from cffi->nnpy==0.1)
Installing collected packages: nnpy
  Running setup.py install for nnpy
    
Successfully installed nnpy
Cleaning up...
 ---> f416f496d6ab
Removing intermediate container 58d00db4ae0c
Step 14/16 : ENV VTYSH_PAGER more
 ---> Running in f3feb783473d
 ---> 79cdd1baacf0
Removing intermediate container f3feb783473d
Step 15/16 : ADD /home/osboxes/install /home/osboxes/install
 ---> 98d0768f3d5c
Removing intermediate container 094ec8d5d283
Step 16/16 : CMD /bin/bash
 ---> Running in 7e3362f51437
 ---> c8a581524a17
Removing intermediate container 7e3362f51437
Successfully built c8a581524a17
Successfully tagged p4dockerswitch_bmv2:latest
#@rm -fr /tmp/docker_tmp
osboxes@osboxes:~/Desktop/p4-git/p4factory/makefiles$ docker -ps
unknown shorthand flag: 'p' in -ps
See 'docker --help'.

Usage:	docker COMMAND

A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default "/home/osboxes/.docker")
  -D, --debug              Enable debug mode
      --help               Print usage
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/home/osboxes/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/home/osboxes/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/home/osboxes/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  checkpoint  Manage checkpoints
  config      Manage Docker configs
  container   Manage containers
  image       Manage images
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  deploy      Deploy a new stack or update an existing stack
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

osboxes@osboxes:~/Desktop/p4-git/p4factory/makefiles$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
osboxes@osboxes:~/Desktop/p4-git/p4factory/makefiles$ 




make -f docker.mk bmv2-docker-image installpath=$HOME/install


osboxes@osboxes:~/Desktop/p4-git/p4factory/makefiles$ ls -lat /home/osboxes/install/
total 8
drwxr-xr-x 19 osboxes osboxes 4096 Jul  5 07:13 ..
drwxrwxrwx  2 osboxes osboxes 4096 Jul  5 06:15 .
osboxes@osboxes:~/Desktop/p4-git/p4factory/makefiles$ 
